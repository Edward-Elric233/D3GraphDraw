(function (d3$1) {
  "use strict";

  const colorLegend = (selection, props) => {
    const {
      colorScale,
      circleRadius,
      spacing,
      textOffset,
      backgroundRectWidth,
      onClick,
      selected,
    } = props;

    const backgroundRect = selection.selectAll("rect").data([null]);

    const n = colorScale.domain().length;
    backgroundRect
      .enter()
      .append("rect")
      .merge(backgroundRect)
      .attr("x", -circleRadius * 2)
      .attr("y", -circleRadius * 2)
      .attr("rx", circleRadius * 2)
      .attr("width", backgroundRectWidth)
      .attr("height", spacing * n + circleRadius * 3)
      .attr("fill", "#C0C0BB")
      .attr("opacity", 0.8);

    const groups = selection.selectAll("g").data(colorScale.domain());

    const groupEnter = groups
      .enter()
      .append("g")
      .attr("class", "tick")
      .attr(
        "transform",
        (d, i) => `translate(0, ${i * spacing + circleRadius})`
      )
      .merge(groups)
      .attr("opacity", (d) => {
        if (selected.length === 0) return 1;
        for (let i = 0; i < selected.length; ++i) {
          if (+d === selected[i]) {
            return 1;
          }
        }
        return 0.2;
      })
      .on("click", onClick);

    groups.exit().remove();

    groupEnter
      .append("circle")
      .attr("r", 0)
      .merge(groups.select("circle")) //both enter section and update section
      .attr("fill", colorScale)
      .transition()
      .duration(1000)
      .attr("r", circleRadius);

    const text = groups.select("text");

    groupEnter
      .append("text")
      .attr("x", textOffset)
      .attr("dy", "0.32em")
      //.merge(text)	//both enter section and update section
      .text((d) => (typeof d === "undefined" ? "undefined" : d));
  };

  const checkButton = (selection, props) => {
    const {
      height,
      buttonRadius,
      spacing,
      textOffset,
      backgroundRectWidth,
      onCheck,
      check,
    } = props;

    const backgroundRect = selection.selectAll("rect").data([null]);

    backgroundRect
      .enter()
      .append("rect")
      .merge(backgroundRect)
      .attr("x", -buttonRadius * 2)
      .attr("y", -buttonRadius * 2)
      .attr("rx", buttonRadius * 2)
      .attr("width", backgroundRectWidth)
      .attr("height", 50)
      .attr("fill", "#C0C0BB")
      .attr("opacity", 0.8);

    const group = selection.selectAll("g").data([null]);
    const groupEnter = group
      .enter()
      .append("g")
      .attr("transform", `translate(0,0)`);
    groupEnter
      .append("rect")
      .attr("x", 0)
      .attr("y", 0)
      .attr("rx", 0)
      .attr("width", "1em")
      .attr("height", "1em")
      .on("click", onCheck)
      .merge(group.select("rect"))
      .attr("fill", check ? "black" : "white");

    groupEnter
      .append("text")
      .attr("x", 30)
      .attr("y", 10)
      .attr("dy", "0.32em")
      .text("分层显示");
  };

  const changeForce = (selection, props) => {
    const {
      height,
      buttonRadius,
      spacing,
      textOffset,
      backgroundRectWidth,
      changeForceF,
      forceSelected,
    } = props;

    const backgroundRect = selection.selectAll("rect").data([null]);

    backgroundRect
      .enter()
      .append("rect")
      .merge(backgroundRect)
      .attr("x", -buttonRadius * 2)
      .attr("y", -buttonRadius * 2)
      .attr("rx", buttonRadius * 2)
      .attr("width", backgroundRectWidth)
      .attr("height", 50)
      .attr("fill", "#C0C0BB")
      .attr("opacity", 0.8);

    const group = selection.selectAll("g").data([null, null]);
    const groupEnter = group
      .enter()
      .append("g")
      .attr("transform", (d, i) => `translate(${i * 120}, 0)`);
    groupEnter
      .append("rect")
      .attr("x", 0)
      .attr("y", 0)
      .attr("rx", 0)
      .attr("width", "1em")
      .attr("height", "1em")
      .on("click", changeForceF)
      .merge(group.select("rect"))
      .attr("fill", (d, i) => (i === forceSelected ? "black" : "white"));

    groupEnter
      .append("text")
      .attr("x", 30)
      .attr("y", 10)
      .attr("dy", "0.32em")
      .text((d, i) => (i == 0 ? "引力" : "斥力"));
  };

  const svg = d3$1.select("svg");

  const g = svg.append("g");

  const colorLegendG = svg.append("g").attr("transform", `translate(30, 30)`);
  const checkButtonG = svg.append("g").attr("transform", `translate(100,100)`);
  const changeForceG = svg.append("g").attr("transform", `translate(100,30)`);
  // svg.style('background-color', 'red'); test
  const width = +svg.attr("width");
  const height = +svg.attr("height");
  const x0 = width / 2;
  const y0 = height / 2;

  let selected = [];
  let check = false;
  let forceSelected = null;

  function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }

  function dragended(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }

  const colorValue = (d) => d.k;
  var node = null,
    edge = null,
    onClick = null,
    onCheck = null,
    colorScale = null,
    Drag = null,
    simulation = null,
    changeForceF = null;

  const tick = () => {
    const circleRadius = 5;

    const line = g.selectAll("line").data(edge);

    line
      .enter()
      .append("line")
      .style("stroke-width", 0.5)
      .style("opacity", 0.5)
      .merge(line)
      .attr("x1", (d) => node[d.source - 1].x + x0)
      .attr("y1", (d) => node[d.source - 1].y + y0)
      .attr("x2", (d) => node[d.target - 1].x + x0)
      .attr("y2", (d) => node[d.target - 1].y + y0)
      .style("stroke", (d) => {
        let uVis = false,
          vVis = false;
        let uk = node[d.source - 1].k;
        let vk = node[d.target - 1].k;
        if (check && !(uk === vk)) {
          return null;
        }

        if (selected.length === 0) return "black";
        for (let i = 0; i < selected.length; ++i) {
          if (uk === selected[i]) {
            uVis = true;
          }
          if (vk === selected[i]) {
            vVis = true;
          }
        }
        if (uVis && vVis) {
          //console.log('yes');
          return "black";
        } else return null;
      });

    const circle = g.selectAll("circle").data(node);
    circle
      .enter()
      .append("circle")
      .attr("fill", (d) => colorScale(colorValue(d)))
      .call(Drag)
      .merge(circle)
      .attr("cy", (d) => d.y + y0)
      .attr("cx", (d) => d.x + x0)
      .attr("r", (d) => {
        if (selected.length === 0) return circleRadius;
        for (let i = 0; i < selected.length; ++i) {
          if (d.k === selected[i]) {
            return circleRadius;
          }
        }
        return 0;
      });
  };

  const render = () => {
    tick();

    colorLegendG.call(colorLegend, {
      colorScale,
      circleRadius: 8,
      spacing: 20,
      textOffset: 15,
      backgroundRectWidth: 50,
      onClick,
      selected,
    });

    checkButtonG.call(checkButton, {
      buttonRadius: 8,
      spacing: 20,
      textOffset: 15,
      backgroundRectWidth: 130,
      onCheck,
      check,
    });
    changeForceG.call(changeForce, {
      buttonRadius: 8,
      spacing: 20,
      textOffset: 15,
      backgroundRectWidth: 260,
      changeForceF,
      forceSelected,
    });
  };
  Promise.all([d3$1.csv("output.csv"), d3$1.csv("input.csv")]).then(
    ([Node, Edge]) => {
      node = Node;
      edge = Edge;
      node.forEach((d) => {
        //   //得到的数据默认每个属性的值都是字符串，因此需要进行转换
        d.x = +d.x;
        d.y = +d.y;
        d.k = +d.k;
        d.id = +d.id;
      });
      edge.forEach((d) => {
        d.source = +d.source;
        d.target = +d.target;
      });

      onClick = (d) => {
        let i = 0;
        for (; i < selected.length; ++i) {
          if (selected[i] === +d) break;
        }
        if (selected.length === 0) {
          selected.push(+d);
        } else if (i === selected.length) {
          selected.push(+d);
        } else {
          selected.splice(i, 1);
        }
        render();
      };
      changeForceF = (d, i) => {
        console.log(i);
        if (forceSelected === i) {
          forceSelected = null;
        } else {
          forceSelected = i;
        }
        if (forceSelected === 1) {
          simulation
            .force("charge", d3$1.forceManyBody().strength(0.5))
            .force("center", d3$1.forceCenter(0, 0))
            .force(
              "collision",
              d3.forceCollide().radius(function (d) {
                return 5 + d.k;
              })
            );
        } else if (forceSelected === 0) {
          simulation
            .force("charge", d3$1.forceManyBody().strength(-0.5))
            .force("center", d3$1.forceCenter(0, 0))
            .force(
              "collision",
              d3.forceCollide().radius(function (d) {
                return 15 - d.k;
              })
            );
        } else {
          simulation = d3$1
            .forceSimulation(node)
            .force("link", link)

            .on("tick", tick);
        }
        render();
      };
      onCheck = (d) => {
        if (check) check = false;
        else check = true;
        console.log(check);
        render();
      };
      colorScale = d3$1.scaleOrdinal().domain(node.map(colorValue));
      colorScale
        .domain(colorScale.domain().sort().reverse())
        .range(d3$1.schemeRdYlGn[colorScale.domain().length]);

      let link = (d3$1.forceLink(edge).id = (d) => d.id);

      simulation = d3$1
        .forceSimulation(node)
        .force("link", link)

        .on("tick", tick);
      Drag = d3
        .drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended);
      console.log(node);
      console.log(edge);

      render();
      // console.log(edge);
    }
  );
})(d3);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
